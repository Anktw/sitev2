[
  {
    "id": 2,
    "title": "DeepTrace",
    "marketingline": "A scalable, real-time web crawler and search engine built in Go",
    "description": "A high-performance distributed crawler that fetches, indexes, and serves web pages in real-time using Go’s concurrency model.",
    "largedescription": "This project implements a distributed web crawler and search engine that fetches and indexes pages concurrently. Using Go's goroutines and channels, it efficiently processes URLs, updates an inverted index, and serves search results via a RESTful API. The system is designed for scalability, fault tolerance, and high throughput, making it ideal for large-scale data retrieval and indexing.",
    "image": "/images/deeptrace.jpg",
    "heading2": "Fast, Scalable, and Distributed Web Crawling",
    "description2": "A Go-based system leveraging concurrency, real-time indexing, and distributed architecture to build a lightweight yet powerful search engine.",
    "github": "https://github.com/Anktw/deeptrace",
    "livelink": "https://deeptrace.unkit.site",
    "whyuse1": "Highly Concurrent Web Crawling",
    "whyuse2": "Distributed Worker Model for Scalability",
    "whyuse3": "Real-Time Indexing and Search",
    "whyuse4": "Fault-Tolerant and Efficient Processing",
    "whyuse5": "REST API for Easy Search Integration",
    "whyuse6": "Optimized for Performance and Low Latency",
    "desc1": "Crawls web pages concurrently using Go’s goroutines and channels.",
    "desc2": "Uses a distributed master-worker model for horizontal scaling.",
    "desc3": "Indexes web pages in real time with efficient text processing.",
    "desc4": "Built-in rate limiting and fault tolerance mechanisms.",
    "desc5": "Search API with ranking algorithms for quick retrieval.",
    "desc6": "Lightweight Go runtime ensures high-speed crawling and indexing.",
    "working": "The system operates with a master node that assigns URLs to distributed worker nodes. Each worker fetches, parses, and processes pages, updating a real-time inverted index. The search engine ranks results based on frequency and relevance, exposing a REST API for queries.",
    "techStack": [
      "Golang",
      "Docker",
      "Next",
      "React",
      "FastAPI",
      "Tailwind",
      "Typescript",
      "Javascript"
    ]
  },
  {
    "id": 14,
    "title": "EthicsBook",
    "marketingline": "A platform where users control their feed completely",
    "description": "Fair, Transparent, and User-Controlled",
    "largedescription": "EthicsBook is a social media platform designed to bring fairness and transparency to content discovery. Unlike mainstream networks that manipulate engagement through hidden AI-driven algorithms, EthicsBook ensures that users have full control over their feed. It eliminates biased recommendations and prioritizes user choice in content ranking.",
    "image": "/images/image.png",
    "heading2": "Fair, Transparent, and User-Controlled",
    "description2": "EthicsBook removes hidden algorithmic biases, giving users more control over what they see while protecting privacy and ensuring fairness.",
    "download": "",
    "filetype": "Apk",
    "livelink": "https://ethicsbook.unkit.site",
    "github": "https://github.com/Anktw/ethicsbook",
    "whyuse1": "No Hidden Content Manipulation",
    "whyuse2": "User-Controlled Algorithmic Feeds",
    "whyuse3": "Algorithmic feeds are the first at-scale misaligned AIs",
    "whyuse4": "Freedom from Censorship",
    "whyuse5": "Transparent, Open-Source Ranking System",
    "desc1": "Unlike mainstream platforms, EthicsBook doesn’t manipulate feeds for engagement—it puts you in charge.",
    "desc2": "You decide how content is ranked, ensuring a fair and unbiased experience.",
    "desc3": "Privacy is a priority—your data remains yours, free from corporate exploitation.",
    "desc4": "Censorship-resistant design ensures free expression without external control.",
    "desc5": "All ranking and engagement algorithms are open-source, ensuring full transparency.",
    "working": "EthicsBook uses FastAPI and PostgreSQL to provide a fast and efficient social media experience. Instead of AI-driven manipulation, it offers user-configurable ranking options and a transparent algorithm. Built with Flutter, it ensures a smooth mobile experience while keeping user data secure.",
    "techStack": [
      "Flutter",
      "FastAPI",
      "PostgreSQL"
    ]
  },
  {
    "id": 18,
    "title": "RayTracer",
    "marketingline": "High-Performance Distributed Ray Tracer in C with GPU Acceleration",
    "description": "A high-performance ray tracer that renders photorealistic 3D scenes using C, multi-threading, GPU acceleration, and distributed computing.",
    "largedescription": "This project implements a distributed ray tracing engine in C, leveraging manual memory management, POSIX multi-threading, CUDA-based GPU acceleration, and networking via BSD sockets. It is optimized for high-performance graphics rendering, making it suitable for industries like gaming, simulation, and HPC. The system distributes rendering workloads across multiple machines for improved scalability and speed.",
    "image": "/images/image.png",
    "heading2": "Optimized Ray Tracing with GPU Acceleration",
    "description2": "A C-based engine utilizing parallel processing, distributed computing, and GPU acceleration for high-performance rendering.",
    "github": "https://github.com/Anktw/raytracer",
    "livelink": "https://raytracer.unkit.site",
    "whyuse1": "Low-Level Memory Management for Maximum Efficiency",
    "whyuse2": "Multi-Threading with POSIX Threads (pthreads)",
    "whyuse3": "GPU Acceleration via CUDA for Faster Ray Processing",
    "whyuse4": "Distributed Rendering Using BSD Sockets",
    "whyuse5": "Manual SIMD Optimizations for Performance",
    "whyuse6": "Minimal Overhead for Real-Time Performance",
    "desc1": "Implements a core ray tracing algorithm with ray-object intersections and lighting models.",
    "desc2": "Utilizes multi-threading with POSIX pthreads to parallelize the rendering process.",
    "desc3": "Leverages CUDA to offload computationally expensive ray calculations to the GPU.",
    "desc4": "Uses BSD sockets to distribute rendering tasks across multiple nodes for scalability.",
    "desc5": "Optimizes rendering performance with SIMD intrinsics (SSE/AVX) and cache-efficient algorithms.",
    "desc6": "Outputs rendered images in PPM format or integrates stb_image_write.h for PNG support.",
    "working": "The ray tracer operates with a master node that assigns rendering tasks to worker nodes. Each worker computes pixel values, applies shading models, and transmits results back to the master, which compiles the final image.",
    "techStack": [
      "C"
    ]
  },
  {
    "id": 20,
    "title": "AnomalyDetector",
    "marketingline": "Real-Time Multimodal Anomaly Detection System",
    "description": "A real-time anomaly detection and predictive maintenance system that processes time-series sensor data, images, and audio using deep learning and reinforcement learning.",
    "largedescription": "This project integrates multiple data modalities—sensor readings, machine images, and audio—to detect anomalies and predict failures in industrial machinery. It combines CNNs for image-based defect detection, RNNs/Transformers for time-series analysis, and pre-trained models for audio classification. Reinforcement learning (DQN/PPO) optimizes maintenance scheduling, reducing downtime and costs. Designed for real-time streaming, the system can be deployed on cloud or edge devices.",
    "image": "/images/image.png",
    "heading2": "AI-Driven Predictive Maintenance for Industry 4.0",
    "description2": "An intelligent system combining deep learning, real-time anomaly detection, and reinforcement learning to optimize maintenance strategies.",
    "github": "https://github.com/Anktw/anomalydetector",
    "livelink": "https://anomalydetector.unkit.site",
    "whyuse1": "Multimodal Data Fusion for Anomaly Detection",
    "whyuse2": "Deep Learning with CNNs, RNNs, and Transformers",
    "whyuse3": "Real-Time Data Processing with Kafka & Flask",
    "whyuse4": "Reinforcement Learning for Optimal Maintenance Scheduling",
    "whyuse5": "Cloud and Edge Deployability for Scalability",
    "whyuse6": "Interpretable AI with SHAP & LIME",
    "desc1": "Uses CNNs (e.g., ResNet) for defect detection in industrial images.",
    "desc2": "Processes sensor data with LSTMs/Transformers for anomaly prediction.",
    "desc3": "Analyzes audio spectrograms with pre-trained models like YAMNet.",
    "desc4": "Employs Variational Autoencoders (VAE) or GANs for predictive modeling.",
    "desc5": "Optimizes maintenance schedules using Deep Q-Network (DQN) or PPO RL agents.",
    "desc6": "Deploys a real-time dashboard with Streamlit/Dash to visualize anomalies and predictions.",
    "working": "The system ingests real-time data from sensors, images, and audio feeds, processes it with deep learning models, and flags anomalies. A reinforcement learning agent optimizes maintenance decisions based on detected anomalies, reducing unnecessary downtime and costs.",
    "techStack": [
      "Python"
    ]
  },
  
  {
    "id": 23,
    "title": "CampusConnect",
    "marketingline": "Connect, Compete, and Stay Informed",
    "description": "Campus community in a social platform",
    "largedescription": "CampusConnect is designed exclusively for students to enhance their campus experience. It brings together features like leaderboards for friendly competition, event management to stay updated on campus activities, and a comprehensive hub for all college related information.",
    "image": "/images/campusconnect logo.png",
    "heading2": "Social Media like User Interface and Functionalities",
    "description2": "CampusConnect incorporates a user interface and features that closely resemble popular social media platforms, fostering seamless interaction and engagement among students.",
    "livelink": "https://campusconnect.unkit.site",
    "github": "https://github.com/Anktw/campusconnect",
    "whyuse1": "Centralized Hub for Campus Activities",
    "whyuse2": "Competitive Leaderboards",
    "whyuse3": "Seamless Social Media Experience",
    "whyuse4": "Skill Recognition",
    "whyuse5": "Event Management and Participation",
    "whyuse6": "Accessible Anytime, Anywhere",
    "desc1": "CampusConnect simplifies access to college events, resources, and discussions in one platform.",
    "desc2": "Students can showcase skills in sports, coding, and more, ranked in real-time leaderboards.",
    "desc3": "It provides a social platform for sharing posts, engaging with peers, and staying updated.",
    "desc4": "CampusConnect highlights student achievements, motivating them to participate actively in campus life.",
    "desc5": "The app enables easy creation, joining, and tracking of campus events.",
    "desc6": "With mobile-first design, students can access all features and resources on-the-go.",
    "working": "The CampusConnect Leaderboard collects data from various aspects of a student's college journey—such as academic scores, participation in extracurricular activities, and contributions to sustainability or community service. Each category is assigned a weightage, and students accumulate points based on their performance. The system updates the rankings in real-time, allowing students to see their position and progress compared to their peers. It motivates students to enhance their skills across multiple domains, with top performers being highlighted for recognition.",
    "techStack": [
      "Next",
      "MongoDB",
      "FastAPI",
      "PostgreSQL",
      "Typescript",
      "Tailwind",
      "React",
      "Javascript"
    ]
  },
  
  {
    "id": 24,
    "title": "CertificateGenerator",
    "marketingline": "Generate, Verify, and Share Certificates Instantly",
    "description": "A seamless platform to create and verify digital certificates.",
    "largedescription": "CertificateGenerator allows users to design, generate, and verify digital certificates effortlessly. With secure storage in MongoDB and an intuitive Next.js-powered frontend, users can create certificates with custom fields, download them as PDFs, and verify authenticity through a unique certificate ID.",
    "image": "/images/certificategenerator.jpg",
    "heading2": "Create, Validate, and Share with Ease",
    "description2": "A fast, secure, and customizable certificate generation tool with real-time verification and fraud prevention.",
    "livelink": "https://certificate.unkit.site/certificate",
    "github": "https://github.com/Anktw/certificatebuilder",
    "whyuse1": "Instant Certificate Generation",
    "whyuse2": "Unique ID-Based Verification System",
    "whyuse3": "Customizable Certificate Templates",
    "whyuse4": "Secure MongoDB Storage",
    "whyuse5": "PDF Export and Easy Sharing",
    "whyuse6": "Fraud Prevention with Digital Signatures",
    "desc1": "Generate professional digital certificates in just a few clicks.",
    "desc2": "Each certificate gets a unique ID for instant online verification.",
    "desc3": "Custom fields allow institutions to personalize certificates to their needs.",
    "desc4": "All certificates are securely stored in MongoDB with encryption.",
    "desc5": "Users can download certificates as high-quality PDFs for easy sharing.",
    "desc6": "Verification ensures authenticity, preventing fraud and fake credentials.",
    "working": "Users fill in the required certificate details, and the system generates a PDF certificate with a unique verification ID. The ID is stored in MongoDB and can be used to verify authenticity through the verification page. The platform ensures security through encrypted data storage and blockchain-based digital signatures.",
    "techStack": [
      "Next",
      "MongoDB",
      "FastAPI",
      "PostgreSQL",
      "Typescript",
      "Tailwind",
      "React",
      "Javascript"
    ]
  },
  {
    "id": 26,
    "title": "LockIn",
    "marketingline": "Task Management with Flexible and Challenging Time Tracking with Rewards",
    "description": "A productivity app that helps you manage tasks efficiently with time tracking, prioritization, and rewards for early completion and also daily motivational quotes.",
    "largedescription": "LockIn is a modern task management app designed to boost productivity. It enables users to create, edit, and track tasks in real-time while offering flexible scheduling, persistent storage, and a seamless UI. Users earn points for completing tasks ahead of schedule, making productivity rewarding and motivating.",
    "image": "/images/lockin.png",
    "heading2": "Effortless Task Management & Productivity Tracking",
    "description2": "LockIn provides real-time task tracking, prioritization, rewards for early task completion, and daily motivational quotes to keep you inspired.",
    "livelink": "https://lockin.unkit.site/",
    "github": "https://github.com/Anktw/mayajal",
    "whyuse1": "Real-Time Task Tracking",
    "whyuse2": "Task Prioritization with Drag & Drop",
    "whyuse3": "Flexible Time Adjustments (+x/-x time units)",
    "whyuse4": "Smart Notifications & Reminders",
    "whyuse5": "Enhanced UI",
    "whyuse6": "Motivational Quotes to Complete Daily Tasks Management",
    "desc1": "Easily add, edit, and delete tasks with estimated completion times.",
    "desc2": "Track ongoing tasks in real-time, ensuring better time management.",
    "desc3": "Reorder tasks based on priority using intuitive controls.",
    "desc4": "Increase or decrease task durations with quick +15m/-15m adjustments.",
    "desc5": "Receive alerts when tasks are nearing their deadline.",
    "desc6": "Stay motivated with daily inspirational quotes and a reward system.",
    "working": "LockIn integrates Next.js for a responsive UI and FastAPI for a scalable backend. PostgreSQL ensures persistent task storage, while the app includes real-time tracking, reminders, flexible scheduling, a points system for early task completion, and daily motivational quotes.",
    "techStack": [
      "Next",
      "FastAPI",
      "PostgreSQL"
    ]
  },
  {
    "id": 27,
    "title": "Auto-Next",
    "marketingline": "A VS Code Extension to Automate `npm run dev` and Browser Launch for Next.js Projects",
    "description": "Auto-Next is a VS Code extension that streamlines the Next.js development workflow by automatically running the dev server and opening the app in your browser with dynamic port detection and cross-platform support.",
    "largedescription": "Auto-Next is a custom-built Visual Studio Code extension designed to automate and accelerate the development process for Next.js projects. It automatically triggers `npm run dev` when a workspace is opened, detects the port dynamically by parsing process output, and opens the application in the default browser. It works seamlessly across Windows, macOS, and Linux. Built with TypeScript, Node.js, and esbuild, the extension uses child processes, OS-specific handling, and regular expressions for efficient output parsing. A complete test suite using the VS Code extension testing framework ensures its reliability. The codebase is linted with ESLint and bundled using a custom esbuild script.",
    "image": "/images/27.png",
    "heading2": "Developer Productivity Boost with Auto-Next",
    "description2": "A cross-platform VS Code extension that automates Next.js dev server startup and browser launching with intelligent port detection.",
    "github": "https://github.com/anktw/auto-next",
    "livelink": "https://autonext.unkit.site",
    "filetype": "Extension",
    "download": "https://marketplace.visualstudio.com/items?itemName=unkit.auto-next",
    "whyuse1": "Automates Next.js dev server startup on VS Code launch",
    "whyuse2": "Cross-platform support: Windows, macOS, and Linux",
    "whyuse3": "Dynamic port detection and auto browser launch",
    "whyuse4": "Robust testing using VS Code extension testing tools",
    "whyuse5": "Built with TypeScript, Node.js, and esbuild",
    "whyuse6": "Clean code with ESLint and TypeScript linting",
    "desc1": "Triggers `npm run dev` automatically when a workspace with a Next.js project is opened in VS Code.",
    "desc2": "Parses dev server output with regular expressions to detect the running port dynamically.",
    "desc3": "Opens the correct local URL in the default browser using platform-specific commands (start/open/xdg-open).",
    "desc4": "Implements cross-platform compatibility using `os.platform()` and conditional logic.",
    "desc5": "Type-safe and robust implementation using TypeScript, with bundling handled by a custom `esbuild.js` script.",
    "desc6": "Includes a comprehensive test suite and uses ESLint for enforcing code quality.",
    "working": "Upon activation in VS Code, Auto-Next starts the Next.js dev server by running `npm run dev`, listens for the output indicating which port the server is running on, and launches the app in the default browser. The extension is bundled using esbuild, and tests ensure it runs smoothly across all major OS platforms.",
    "techStack": [
      "Typescript"
    ]
  },
  {
    "id": 28,
    "title": "Accounts",
    "marketingline": "Full-Stack User Authentication System using Next.js and FastAPI",
    "description": "A complete user authentication system with a modern Next.js frontend and a secure FastAPI backend. Includes JWT, OAuth 2.0, Redis for OTPs, and full email verification flows.",
    "largedescription": "This project showcases a robust full-stack authentication solution. The frontend, built using Next.js, leverages SSR and SSG for performance and SEO, and implements secure authentication flows using cookies and API routes. The backend, developed with FastAPI, handles user management, JWT-based authentication, and social login via OAuth 2.0. Redis is used for managing OTP-based email verification. SQLAlchemy handles interactions with a PostgreSQL database. Email workflows use styled HTML templates sent via SMTP. The system also supports automatic token refresh, password resets, and session management, ensuring a seamless user experience.",
    "image": "/images/28.png",
    "heading2": "Modern Full-Stack Authentication with Next.js and FastAPI",
    "description2": "A production-ready full-stack user auth solution with social logins, OTP verification, and secure session management.",
    "github": "https://github.com/anktw/accounts",
    "livelink": "https://accounts.unkit.site",
    "whyuse1": "Next.js SSR and SSG for Performance and SEO",
    "whyuse2": "Secure Auth with JWT, Cookies, and Token Refresh",
    "whyuse3": "OTP-Based Email Verification with Redis",
    "whyuse4": "Google and GitHub OAuth 2.0 Integration",
    "whyuse5": "PostgreSQL and SQLAlchemy for Reliable Persistence",
    "whyuse6": "Asynchronous Operations with Styled Email Workflows",
    "desc1": "Next.js frontend with SSR, SSG, dynamic routing, API routes, and middleware for efficient navigation and request handling.",
    "desc2": "Secure authentication flows with login, logout, password reset, and email verification using cookies and token management.",
    "desc3": "Automatic token refresh via a custom fetchWithAuth utility ensures persistent sessions across pages and time.",
    "desc4": "Backend developed in FastAPI featuring secure JWT auth, Argon2 password hashing, and social logins via OAuth 2.0.",
    "desc5": "Uses Redis to store OTPs for user email verification and temporary registration states.",
    "desc6": "Custom HTML-based email service supports flows like password reset, email verification, and welcome emails.",
    "working": "The frontend communicates with a FastAPI backend to register, authenticate, and manage users. Redis handles OTP flows, SQLAlchemy stores user data in PostgreSQL, and JWT with cookies manages sessions securely. Email flows are processed via SMTP, and the system uses async functions for optimal performance.",
    "techStack": [
      "Next",
      "FastAPI",
      "PostgreSQL",
      "Redis",
      "React",
      "Tailwind",
      "Typescript"
    ]
  },
  {
    "id": 29,
    "title": "Backend",
    "marketingline": "Backend API for User Management and Authentication using FastAPI, JWT, and OAuth",
    "description": "A secure and scalable backend built with FastAPI, utilizing JWT, OAuth 2.0, and Argon2 for modern authentication workflows. Includes Redis-based OTP handling, PostgreSQL with SQLAlchemy ORM, and email services via SMTP.",
    "largedescription": "This project is a comprehensive user authentication and management system built with FastAPI. It features JWT-based authentication, secure password hashing with Argon2, OTP verification using Redis, and social login integration using OAuth 2.0 (Google and GitHub). The system leverages SQLAlchemy for structured database operations with PostgreSQL, Pydantic for validation, and includes a modular structure for maintainability. Email-based flows like registration confirmation and password reset are powered by SMTP and HTML templates. Asynchronous operations, robust error handling, and a clean architecture with dependency injection ensure high performance and reliability.",
    "image": "/images/29.png",
    "heading2": "Robust and Secure User Authentication API",
    "description2": "A FastAPI-based backend system supporting secure login, registration, social auth, OTP verification, and admin control with modern best practices.",
    "github": "https://github.com/anktw/backend",
    "livelink": "https://accounts.unkit.site",
    "whyuse1": "Secure Password Hashing with Argon2",
    "whyuse2": "JWT-based Stateless Authentication with Refresh Tokens",
    "whyuse3": "OAuth 2.0 Integration for Google and GitHub Logins",
    "whyuse4": "OTP Verification System with Redis",
    "whyuse5": "Clean Codebase with Async, DI, and Pydantic Settings",
    "whyuse6": "Comprehensive Email Workflows via SMTP & Templates",
    "desc1": "Implements user registration with OTP email verification and Argon2-hashed passwords.",
    "desc2": "Supports secure login with JWT tokens and refresh tokens for session persistence.",
    "desc3": "Integrates Google and GitHub social login using OAuth 2.0 standards.",
    "desc4": "Uses Redis to store OTPs and temporary registration data securely and efficiently.",
    "desc5": "Includes role-based access control with dedicated routes for admin users.",
    "desc6": "Handles password resets and user notifications using SMTP and styled HTML email templates.",
    "working": "The backend handles user operations via REST APIs built with FastAPI. It uses Redis for temporary data like OTPs, SQLAlchemy with PostgreSQL for persistent storage, and JWT/OAuth for authentication. Emails are sent for verification, password reset, and account events. The system is structured with async services, DI, and Pydantic validation to ensure maintainability and performance.",
    "techStack": [
      "FastAPI",
      "PostgreSQL",
      "Redis",
      "Python",
      "Docker"
    ]
  }
]